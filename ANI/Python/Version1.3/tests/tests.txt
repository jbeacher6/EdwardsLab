==================
Anilyze Test Cases
==================

********************************************************
Anilyze Prep Test Cases: Version 1.3, written in Python
********************************************************

Prerequisites for Anilyze Prep Test Cases
------------------------------------------
1. Download tests from https://github.com/jbeacher6/EdwardsLab/tree/master/ANI/Python/Version1.3/Terminal/tests
2. Linux or MacOS (tested on MacOS Sierra Version 10.12.6)
3. Python 2.7 or higher installed

Contents of tests:
/tests/testCaseOut/
/tests/testFiles/test1/1.fna
/tests/testFiles/test1/2.fna
/tests/testFiles/test2/3.fna

Contents of /tests/testFiles/test1/1.fna:
>gi|0000001|ref|NC_000000.1| Examplebacter examplii, complete sequence
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Contents of /tests/testFiles/test1/2.fna:
>gi|00000002|ref|NC_000000.2| Examplebacter examplii, complete sequence
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Contents of /tests/testFiles/test2/3.fna:
>gi|00000003|ref|NC_000000.3| Examplebacter examplii, complete sequence
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG

-------------------
Anilyze Test Case 1
-------------------
Objective: Confirm that the reverse compliment of the concatinated and modified forward dna sequence fna file is correct
Instructions: 
1. Download TestFiles
2. Open Terminal and execute the program with command after changing respective custom directory information, such as the user name or download location: python anilyzePrep.py -i /Users/user/downloads/tests/testFiles -o /Users/user/downloads/tests/testCaseOut
Optional: For help: python anilyzePrep.py -h
3. Open /tests/testCaseOut/complete/complete/test1.fna
Expected Output: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

Output: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

Result: Pass
4. Open /tests/complete/complete/test2.fna
Expected Output: 
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Output: 
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Result: Pass

-------------------
Anilyze Test Case 2
-------------------
Objective: Confirm that the conversion to a custom binary sequemce after Test Case 1 is correct
The custom binary sequence is: A is 00, C is 01, G is 10 and T is 11
Instructions: 
1. Already ran instructions from test case 1

2. Open /tests/testCaseOut/complete/binary/complete/test1.fna
Expected Output: 
0000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010
1111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111

Output: 
0000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101
1010101010101010101010101010101010101010101010101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010
1111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111

Result: Pass
3. Open /tests/complete/binary/complete/test2.fna
Expected Output: 
1010101010101010101010101010101010101010101010101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010
0101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101

Output:
1010101010101010101010101010101010101010101010101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010
0101010101010101010101010101010101010101010101010101010101010101010101
0101010101010101010101010101010101010101010101010101010101010101010101

Result: Pass

***********************************************
Anilyze Test Cases: Version 1.4, Written in C
***********************************************

Prerequisites for Anilyze Test Cases
-------------------------------------
1. Prerequisites stated in Anilyze Prep Test Cases completed
2. Download tests from https://github.com/jbeacher6/EdwardsLab/tree/master/ANI/C/Version1.4/tests
3. gcc compiler 
4. Anilyze Prep Test Cases completed

-------------------
Anilyze Test Case 3
-------------------
1. Copy library files to main and change directory to /Version1.4/Main
2. Execute each command:
gcc -c binaryDistanceLib.c -o binaryDistanceLib.o
gcc -c FNACharactersLib.c -o FNACharactersLib.o
gcc -c numberOfLinesLib.c -o numberOfLinesLib.o
gcc main.c binaryDistanceLib.o FNACharactersLib.o numberOfLinesLib.o
./a.out /tests/testCaseOut/complete/binary/complete/ 2 1

2 is the number of kmers and 1 is the percent file similarity threshold
Expected Output:

Output:

Result: 







































